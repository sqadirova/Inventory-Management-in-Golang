// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: warehouses.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/gofrs/uuid"
)

const countOfWarehouses = `-- name: CountOfWarehouses :one
SELECT count(*)
FROM im.warehouses
`

func (q *Queries) CountOfWarehouses(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countOfWarehouses)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWarehouse = `-- name: CreateWarehouse :one
INSERT INTO im.warehouses
    (warehouse_name,logistic_center_id)
VALUES
    ($1,$2)
RETURNING id, warehouse_name, logistic_center_id, created_at, updated_at
`

type CreateWarehouseParams struct {
	WarehouseName    string    `json:"warehouse_name"`
	LogisticCenterID uuid.UUID `json:"logistic_center_id"`
}

func (q *Queries) CreateWarehouse(ctx context.Context, arg CreateWarehouseParams) (ImWarehouse, error) {
	row := q.db.QueryRowContext(ctx, createWarehouse, arg.WarehouseName, arg.LogisticCenterID)
	var i ImWarehouse
	err := row.Scan(
		&i.ID,
		&i.WarehouseName,
		&i.LogisticCenterID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWarehouse = `-- name: DeleteWarehouse :exec
DELETE FROM im.warehouses
WHERE id = $1
`

func (q *Queries) DeleteWarehouse(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteWarehouse, id)
	return err
}

const getOneWarehouse = `-- name: GetOneWarehouse :one
SELECT id, warehouse_name, logistic_center_id, created_at, updated_at FROM im.warehouses w WHERE w.id=$1
`

func (q *Queries) GetOneWarehouse(ctx context.Context, id uuid.UUID) (ImWarehouse, error) {
	row := q.db.QueryRowContext(ctx, getOneWarehouse, id)
	var i ImWarehouse
	err := row.Scan(
		&i.ID,
		&i.WarehouseName,
		&i.LogisticCenterID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWarehouseById = `-- name: GetWarehouseById :one
SELECT jsonb_build_object(
               'warehouse_id', a.id,
               'warehouse_name', a.warehouse_name,
               'logisticCenter', y.logisticCenter)
FROM im.warehouses a
         LEFT JOIN LATERAL (
    SELECT jsonb_build_object('logistic_center_id', l.id, 'logistic_center_name', l.logistic_center_name) AS logisticCenter
    FROM im.logistic_centers l WHERE l.id = a.logistic_center_id
    ) AS y ON true
WHERE a.id = $1
LIMIT 1
`

func (q *Queries) GetWarehouseById(ctx context.Context, id uuid.UUID) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getWarehouseById, id)
	var jsonb_build_object json.RawMessage
	err := row.Scan(&jsonb_build_object)
	return jsonb_build_object, err
}

const getWarehouseByLogisticCenterId = `-- name: GetWarehouseByLogisticCenterId :one
SELECT id, warehouse_name, logistic_center_id, created_at, updated_at FROM im.warehouses w WHERE w.logistic_center_id=$1 AND w.warehouse_name ILIKE $2
`

type GetWarehouseByLogisticCenterIdParams struct {
	LogisticCenterID uuid.UUID `json:"logistic_center_id"`
	WarehouseName    string    `json:"warehouse_name"`
}

func (q *Queries) GetWarehouseByLogisticCenterId(ctx context.Context, arg GetWarehouseByLogisticCenterIdParams) (ImWarehouse, error) {
	row := q.db.QueryRowContext(ctx, getWarehouseByLogisticCenterId, arg.LogisticCenterID, arg.WarehouseName)
	var i ImWarehouse
	err := row.Scan(
		&i.ID,
		&i.WarehouseName,
		&i.LogisticCenterID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWarehouseByName = `-- name: GetWarehouseByName :one
SELECT id, warehouse_name, logistic_center_id, created_at, updated_at
FROM im.warehouses
WHERE warehouse_name = $1
LIMIT 1
`

func (q *Queries) GetWarehouseByName(ctx context.Context, warehouseName string) (ImWarehouse, error) {
	row := q.db.QueryRowContext(ctx, getWarehouseByName, warehouseName)
	var i ImWarehouse
	err := row.Scan(
		&i.ID,
		&i.WarehouseName,
		&i.LogisticCenterID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWarehouses = `-- name: GetWarehouses :many
SELECT jsonb_build_object(
               'warehouse_id', a.id,
               'warehouse_name', a.warehouse_name,
               'logisticCenters', y.logisticCenter)
FROM im.warehouses a
         LEFT JOIN LATERAL (
    SELECT jsonb_build_object('logistic_center_id', l.id, 'logistic_center_name', l.logistic_center_name) AS logisticCenter
    FROM im.logistic_centers l WHERE l.id = a.logistic_center_id
    ) AS y ON true
ORDER BY a.created_at DESC
`

func (q *Queries) GetWarehouses(ctx context.Context) ([]json.RawMessage, error) {
	rows, err := q.db.QueryContext(ctx, getWarehouses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []json.RawMessage
	for rows.Next() {
		var jsonb_build_object json.RawMessage
		if err := rows.Scan(&jsonb_build_object); err != nil {
			return nil, err
		}
		items = append(items, jsonb_build_object)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWarehousesWithPagination = `-- name: GetWarehousesWithPagination :many
SELECT jsonb_build_object(
               'warehouse_id', a.id,
               'warehouse_name', a.warehouse_name,
               'logisticCenter', y.logisticCenter)
FROM im.warehouses a
         LEFT JOIN LATERAL (
    SELECT jsonb_build_object('logistic_center_id', l.id, 'logistic_center_name', l.logistic_center_name) AS logisticCenter
    FROM im.logistic_centers l WHERE l.id = a.logistic_center_id
    ) AS y ON true
ORDER  BY a.created_at DESC
LIMIT $1
OFFSET $2
`

type GetWarehousesWithPaginationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetWarehousesWithPagination(ctx context.Context, arg GetWarehousesWithPaginationParams) ([]json.RawMessage, error) {
	rows, err := q.db.QueryContext(ctx, getWarehousesWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []json.RawMessage
	for rows.Next() {
		var jsonb_build_object json.RawMessage
		if err := rows.Scan(&jsonb_build_object); err != nil {
			return nil, err
		}
		items = append(items, jsonb_build_object)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWarehouse = `-- name: UpdateWarehouse :one
UPDATE im.warehouses
SET    warehouse_name=$2,
       logistic_center_id=$3
WHERE  id=$1
RETURNING id, warehouse_name, logistic_center_id, created_at, updated_at
`

type UpdateWarehouseParams struct {
	ID               uuid.UUID `json:"id"`
	WarehouseName    string    `json:"warehouse_name"`
	LogisticCenterID uuid.UUID `json:"logistic_center_id"`
}

func (q *Queries) UpdateWarehouse(ctx context.Context, arg UpdateWarehouseParams) (ImWarehouse, error) {
	row := q.db.QueryRowContext(ctx, updateWarehouse, arg.ID, arg.WarehouseName, arg.LogisticCenterID)
	var i ImWarehouse
	err := row.Scan(
		&i.ID,
		&i.WarehouseName,
		&i.LogisticCenterID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
